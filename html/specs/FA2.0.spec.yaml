consumes:
- application/json
definitions:
  Connection:
    $ref: ../models/FA2.0/connection.yaml
  Host:
    $ref: ../models/FA2.0/host.yaml
  HostGroup:
    $ref: ../models/FA2.0/host-group.yaml
  HostGroupPerformance:
    $ref: ../models/FA2.0/resource-performance.yaml
  HostGroupPerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  HostPerformance:
    $ref: ../models/FA2.0/resource-performance.yaml
  HostPerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  Member:
    $ref: ../models/FA2.0/member.yaml
  MemberNoIdAll:
    $ref: ../models/FA2.0/member-no-id-all.yaml
  Username:
    $ref: ../models/FA2.0/username.yaml
  Volume:
    $ref: ../models/FA2.0/volume.yaml
  VolumePerformance:
    $ref: ../models/FA2.0/volume-performance.yaml
  VolumePerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  VolumeSnapshot:
    $ref: ../models/FA2.0/volume-snapshot.yaml
  VolumeSnapshotTransfer:
    $ref: ../models/FA2.0/volume-snapshot-transfer.yaml
  VolumeSpace:
    $ref: ../models/FA2.0/resource-space.yaml
info:
  description: "## Pure Swagger UI for FlashArray\nA light weight tool to explore\
    \ the API for FlashArray, community supported. \nFor  help with this tool, use\
    \ [Pure1 Community](https://community.purestorage.com/) or the [code-purestorage\
    \ Slack](https://community.purestorage.com/discussion/9561/join-the-new-pure-code-slack-team-for-api-and-extensibility-discussions)\n\
    \n## Authenticate using API Token\nTo get an API Key, you can do POST /auth/apitoken\
    \ with your user/pass using the 1.x API, then use your API key with POST /login.\
    \  The array returns \na header  with the name \"x-auth-token\".  This swagger\
    \ UI tool, translates that into a cookie so the webbrowser will send on subsequent\
    \ calls.  This Swagger UI tool then\ntranslates that cookie back into a header\
    \ when making the API request to the array.\n\n## Authenticate using OAuth\n###\
    \ Manually generate an id_token \n\n### \n\nIntro to how OAuth2 works with the\
    \ 2.0 version: [Intro](https://support.purestorage.com/FlashArray/PurityFA/Purity_FA_REST_API/Reference/REST_API_2.0_Authentication_Guide)"
  title: FlashArray REST API
  version: '2.0'
  x-logo:
    altText: Pure Storage logo
    backgroundColor: '#ffffff'
    url:
      $ref: ../redoc/PS-LogoBase64-FA.txt
paths:
  /api/2.0/connections:
    $ref: ../paths/FA2.0/connections.path.yaml
  /api/2.0/host-groups:
    $ref: ../paths/FA2.0/host-groups.path.yaml
  /api/2.0/host-groups/hosts:
    $ref: ../paths/FA2.0/host-groups-hosts-members.path.yaml
  /api/2.0/host-groups/performance:
    $ref: ../paths/FA2.0/host-groups-performance.path.yaml
  /api/2.0/host-groups/performance/by-array:
    $ref: ../paths/FA2.0/host-groups-performance-by-array.path.yaml
  /api/2.0/hosts:
    $ref: ../paths/FA2.0/hosts.path.yaml
  /api/2.0/hosts/host-groups:
    $ref: ../paths/FA2.0/hosts-host-groups-members.path.yaml
  /api/2.0/hosts/performance:
    $ref: ../paths/FA2.0/hosts-performance.path.yaml
  /api/2.0/hosts/performance/by-array:
    $ref: ../paths/FA2.0/hosts-performance-by-array.path.yaml
  /api/2.0/login:
    $ref: ../paths/FA2.0/login.path.yaml
  /api/2.0/logout:
    $ref: ../paths/FA2.0/logout.path.yaml
  /api/2.0/volume-snapshots:
    $ref: ../paths/FA2.0/volume-snapshots.path.yaml
  /api/2.0/volume-snapshots/transfer:
    $ref: ../paths/FA2.0/volume-snapshots-transfer.path.yaml
  /api/2.0/volumes:
    $ref: ../paths/FA2.0/volumes.path.yaml
  /api/2.0/volumes/performance:
    $ref: ../paths/FA2.0/volumes-performance.path.yaml
  /api/2.0/volumes/performance/by-array:
    $ref: ../paths/FA2.0/volumes-performance-by-array.path.yaml
  /api/2.0/volumes/space:
    $ref: ../paths/FA2.0/volumes-space.path.yaml
  /api/api_version:
    $ref: ../paths/FA2.0/api_version.path.yaml
  /oauth2/1.0/token:
    $ref: ../paths/TEx-v2/oauth-token.path.yaml
  /oauth2_pub_priv_key_pair:
    get:
      description: "Returns a public and private key pair, This is not part of the\
        \ FlashArray API, \nit's a helper endpoint making it easier to generate an\
        \ oauth2 token_id in this Swagger UI. \nThey keys are generated in the Docker\
        \ container running on this machine.\n\nRecommend to NOT use this API but\
        \ to use OpenSSL instead for production use cases:\n  You can generate a public\
        \ and private RSA key pair like this:\n\n    openssl genrsa -des3 -out private.pem\
        \ 2048\n    \n    That generates a 2048-bit RSA key pair, encrypts them with\
        \ a password you provide and writes them to a file. \n    You need to next\
        \ extract the public key file. You will use this, for instance, on your web\
        \ server to encrypt \n    content so that it can only be read with the private\
        \ key.\n    \n    Export the RSA Public Key to a File\n    This is a command\
        \ that is\n    \n    openssl rsa -in private.pem -outform PEM -pubout -out\
        \ public.pem"
      responses:
        200:
          description: Token Generated
          schema:
            properties:
              private_key:
                description: Private key in PEM format.
                type: string
              public_key:
                description: Public key in PEM format.
                type: string
            type: object
      tags:
      - Auth Helpers
  /oauth2_token_from_private_key:
    post:
      consumes:
      - text/plain
      description: "Authenticates to Flasharray, This returns a token_id (think session\
        \ id), from an existing API Client, \nThis is not part of the FlashArray API,\
        \ it's a helper endpoint making it easy to generate an \noauth2 token_id in\
        \ this Swagger UI.  The private key is being passed into the Docker container\
        \ in\norder to sign the JWT token.  Take a look at the Docker container output\
        \ to see more details \nof what is happening.\n\nCopy the output value, Authorization\
        \ header, and then click on the green Authorize button at the \ntop of the\
        \ page.  Paste in the value into "
      parameters:
      - description: Issuer value displayed in the FlashArray API Registration page
          or pureapiclient list ) by default it's the same name as API Client
        in: header
        name: issuer_name
        type: string
      - description: Client Id value displayed in the FlashArray API Registration
          page or pureapiclient list
        in: header
        name: client_id
        type: string
      - description: Key Id value displayed in the FlashArray API Registration page
          or pureapiclient list
        in: header
        name: key_id
        type: string
      - description: The name of a valid user on the FlashArray that will be authenticated
          to.
        in: header
        name: username
        type: string
      - description: Private key in PEM format that was used to create the Public
          key for this API Client specified as the issuer in this call.
        in: body
        name: private_key
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        200:
          description: Token Generated
          schema:
            example:
              username: pureuser
            properties:
              Authorization:
                description: An OAuth bearer token to be used in the Authorization
                  header for authorization to API endpoints.
                type: string
              description:
                desciption: How to use token
                type: string
            type: object
      tags:
      - Auth Helpers
produces:
- application/json
schemes:
- https
security:
- OAuth2-Bearer-Token: []
- X-Auth-Token: []
securityDefinitions:
  OAuth2-Bearer-Token:
    in: header
    name: Authorization
    type: apiKey
  X-Auth-Token:
    in: header
    name: x-auth-token
    type: apiKey
swagger: '2.0'
tags:
- description: A set of endpoints not in the Purity API, but to make OAuth using this
    tool simple and easy to understand.
  name: Auth Helpers
- description: Pure Storage uses the OAuth 2.0 Token Exchange authorization grant
    and JSON Web Tokens (JWTs) to authenticate to the Pure Storage REST API. Before
    you can exchange the ID Token for an access token, create and enable the API client
    to generate the `key_id`, `id`, and `issuer` values. These values will be used
    as JWT claims for the `subject_token` parameter.
  name: Authorization
- description: A connection gives hosts access to volumes on the array. The system
    supports private (host-volume) connections and public (host group-volume) connections.
    A private connection connects one volume to one host. Private connections are
    typically used for boot volumes and for stand-alone (non-clustered) host applications.
    A shared connection connects a designated set of hosts (via a host group) to a
    designated set of volumes, providing the hosts with a consistent "view" of the
    volumes. All associated hosts use the same LUN to address a given associated volume.
    All hosts and volumes associated with a host group are automatically connected
    to each other by virtue of their associations with the group. Shared connections
    are useful for cluster applications in which several related hosts require consistent
    (same LUN) connectivity to a set of storage volumes.
  name: Connections
- description: Host groups implement consistent connections between a set of hosts
    and one or more volumes. Connections are consistent in the sense that all hosts
    associated with a host group address a volume connected to the group by the same
    LUN. Host groups are typically used to provide a common view of storage volumes
    to the hosts in a clustered application.
  name: Host Groups
- description: Hosts organize the storage network addresses (iSCSI Qualified Names,
    NVMe qualified names, or Fibre Channel world wide names) of client computers to
    identify the host's intiators. Hosts also control communications between clients
    and volumes. After a volume has been created, establish a host-volume connection
    so that the host can read data from and write data to the volume.
  name: Hosts
- description: A volume represents a container that manages the storage space on the
    array. After a volume has been created, establish a host-volume connection so
    that the host can read data from and write data to the volume. Furthermore, protect
    the volume data through asynchronous replication to a remote array, synchronous
    replication between remote arrays, and replication to external storage systems.
  name: Volumes
- description: Volume snapshots are immutable, point-in-time images of the contents
    of one or more volumes. There are two types of volume snapshots&#58; volume snapshots
    and protection group volume snapshots. A volume snapshot is a snapshot that captures
    the contents of a single volume. A protection group volume snapshot is a volume
    snapshot that is created from a group of volumes that are part of the same protection
    group. All of the volume snapshots created from a protection group snapshot are
    point-in-time consistent with each other.
  name: Volume Snapshots
